'''
(참고) https://ji-gwang.tistory.com/274
'''

TC = int(input())
dp = [[0, 0, 0] for _ in range(100000 + 1)]
# [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]

# dp[N] = [a, b, c] 에서 N 이 되는 경우의 수 중에서
# 각 (index + 1) 로 끝나는 경우
dp[4] = [2, 0, 1]
dp[5] = [1, 2, 1]
dp[6] = [3, 3, 2]

# 모듈러 연산은 덧셈에 대해 분배법칙이 성립하므로 매 계산마다 넣어줌으로써
# 숫자가 커지는 것을 방지함
for i in range(7, 100000 + 1):
    dp[i][0] =                (dp[i - 1][1] + dp[i - 1][2]) % 1000000009
    dp[i][1] = (dp[i - 2][0] +                dp[i - 2][2]) % 1000000009
    dp[i][2] = (dp[i - 3][0] + dp[i - 3][1]) % 1000000009

for tc in range(1, TC+1):
    N = int(input())

    if N == 1:
        print(1)
    elif N == 2:
        print(1)
    elif N == 3:
        print(3)
    elif N == 4:
        print(3)
    elif N == 5:
        print(4)
    elif N == 6:
        print(8)
    else:
        print(sum(dp[N])%1000000009)


# dp[4] = 1 / 2 / 1
#       = 1 / 3
#       = 3 / 1
# => 1 로 끝나는 경우 2개
#    2 로 끝나는 경우 0개
#    3 로 끝나는 경우 1개
# => dp[4] = [2, 0, 1]

# dp[5] = 1 / 3 / 1
#       = 2 / 1 / 2
#       = 2 / 3
#       = 3 / 2
# => 1 로 끝나는 경우 1개
#    2 로 끝나는 경우 2개
#    3 로 끝나는 경우 1개
# => dp[5] = [1, 2, 1]

# dp[6] = 1 / 2 / 1 / 2
#       = 1 / 2 / 3
#       = 1 / 3 / 2
#       = 2 / 1 / 2 / 1
#       = 2 / 1 / 3
#       = 2 / 3 / 1
#       = 3 / 1 / 2
#       = 3 / 2 / 1
# => 1 로 끝나는 경우 3개
#    2 로 끝나는 경우 3개
#    3 로 끝나는 경우 2개
# => dp[6] = [3, 3, 2]

# dp[7] 은 dp[4] 에 3 더하면 되는 것인데, dp[4] 의 경우의 수 중에 3으로 끝나는 것 빼면 됨
# dp[7] 은 dp[5] 에 2 더하면 되는 것인데, dp[5] 의 경우의 수 중에 2으로 끝나는 것 빼면 됨
# dp[7] 은 dp[6] 에 1 더하면 되는 것인데, dp[6] 의 경우의 수 중에 1으로 끝나는 것 빼면 됨


# N 1 2 3
# 4 2 0 1
# 5 1 2 1
# 6 3 3 2
# 7 5 2 2
# 8 4 5 3
# 9 8 7 6
# 10 13 7 7
